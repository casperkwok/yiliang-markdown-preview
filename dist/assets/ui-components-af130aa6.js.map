{"version":3,"mappings":"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","names":["initialState","bitable","loaded","loading","error","cachedSDK","loadPromise","useBitableSDK","sdk","setSDK","useState","useEffect","isMounted","async","__vitePreload","import","then","n","i","url","module","finally","loadBitableSDK","Error","initSDK","useBaseSelection","t","useTranslation","selection","setSelection","fieldId","recordId","content","fieldName","recordIds","setRecordIds","currentIndex","setCurrentIndex","getRecordIds","useCallback","table","base","getActiveTable","view","getActiveView","ids","getVisibleRecordIdList","parseCellContent","value","Array","isArray","map","item","text","join","e","JSON","stringify","jsonError","Object","entries","key","val","String","getCellContent","cellValue","getCellString","cleanedValue","replace","parsedValue","parse","setupCellValueListener","checkInterval","window","setInterval","newContent","prev","catch","clearInterval","handleSelectionChange","event","data","field","getFieldById","getName","index","indexOf","Math","max","fetchCellData","switchRecord","direction","length","newIndex","off","onSelectionChange","logo","URL","href","logoEn","SponsorButton","Fragment","children","jsxRuntimeExports","jsxs","target","rel","className","xmlns","viewBox","fill","jsx","d","Navbar","recordIdsLength","onSwitchRecord","i18n","currentLogo","useMemo","currentLanguage","language","isFirstRecord","isLastRecord","src","alt","onClick","disabled","IoChevronBack","IoChevronForward","ErrorContent","message","stroke","strokeLinecap","strokeLinejoin","strokeWidth","location","reload","ContentSkeleton"],"sources":["../../src/core/bitable/useBitableSDK.ts","../../src/core/bitable/useBaseSelection.ts","../../src/assets/logo.svg","../../src/assets/logo_en.svg","../../src/shared/components/SponsorButton.tsx","../../src/shared/components/Navbar.tsx","../../src/shared/components/ErrorContent.tsx","../../src/shared/components/ContentSkeleton.tsx"],"sourcesContent":["/**\n * @file useBitableSDK.ts\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 多维表格SDK钩子函数\n */\nimport { useEffect, useState } from 'react';\nimport { IBitable } from '../../shared/types';\n\n// 定义SDK类型\ntype BitableSDK = {\n    bitable: IBitable | null;\n    loaded: boolean;\n    loading: boolean;\n    error: Error | null;\n};\n\n// 初始状态\nconst initialState: BitableSDK = {\n    bitable: null,\n    loaded: false,\n    loading: true,\n    error: null\n};\n\n// 缓存SDK实例\nlet cachedSDK: IBitable | null = null;\nlet loadPromise: Promise<IBitable> | null = null;\n\n// 加载SDK的函数\nconst loadBitableSDK = async (): Promise<IBitable> => {\n    // 如果已经有缓存，直接返回\n    if (cachedSDK) {\n        return cachedSDK;\n    }\n    \n    // 如果已经有加载中的Promise，复用它\n    if (loadPromise) {\n        return loadPromise;\n    }\n    \n    // 创建新的加载Promise\n    loadPromise = import('@lark-base-open/js-sdk')\n        .then(module => {\n            cachedSDK = module.bitable as IBitable;\n            return module.bitable as IBitable;\n        })\n        .finally(() => {\n            // 加载完成后清除Promise引用\n            loadPromise = null;\n        });\n    \n    return loadPromise;\n};\n\nexport const useBitableSDK = () => {\n    const [sdk, setSDK] = useState<BitableSDK>(initialState);\n\n    useEffect(() => {\n        let isMounted = true;\n\n        const initSDK = async () => {\n            try {\n                // 使用共享的加载函数\n                const bitable = await loadBitableSDK();\n                \n                if (isMounted) {\n                    setSDK({\n                        bitable,\n                        loaded: true,\n                        loading: false,\n                        error: null\n                    });\n                }\n            } catch (error) {\n                if (isMounted) {\n                    setSDK({\n                        bitable: null,\n                        loaded: false,\n                        loading: false,\n                        error: error instanceof Error ? error : new Error('Failed to load Bitable SDK')\n                    });\n                }\n            }\n        };\n\n        void initSDK();\n\n        return () => {\n            isMounted = false;\n        };\n    }, []);\n\n    return sdk;\n};\n\n// 预加载SDK函数\nexport const preloadBitableSDK = () => {\n    if ('requestIdleCallback' in window) {\n        window.requestIdleCallback(() => {\n            loadBitableSDK()\n                .catch(err => console.error('Bitable SDK预加载失败:', err));\n        }, { timeout: 2000 });\n    } else {\n        setTimeout(() => {\n            loadBitableSDK()\n                .catch(err => console.error('Bitable SDK预加载失败:', err));\n        }, 1000);\n    }\n}; ","/**\n * @file useBaseSelection.ts\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 多维表格选择状态管理钩子函数\n */\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { SelectionState, SelectionChangeEvent } from \"../../shared/types\";\nimport { useBitableSDK } from \"./useBitableSDK\";\n\n// 定义富文本节点的接口\ninterface RichTextNode {\n    type: string;\n    text?: string;\n    // 使用更通用的索引签名，确保包含type和text属性的类型\n    [key: string]: unknown;\n}\n\nexport const useBaseSelection = () => {\n    const { t } = useTranslation();\n    const { bitable, loaded, loading, error } = useBitableSDK();\n    const [selection, setSelection] = useState<SelectionState>({\n        fieldId: undefined,\n        recordId: undefined,\n        content: '',\n        fieldName: t('controlBar.output')\n    });\n    const [recordIds, setRecordIds] = useState<string[]>([]);\n    const [currentIndex, setCurrentIndex] = useState(-1);\n\n    // 获取记录列表\n    const getRecordIds = useCallback(async () => {\n        if (!loaded || !bitable) return;\n        \n        try {\n            const table = await bitable.base.getActiveTable();\n            const view = await table.getActiveView();\n            const ids = await view.getVisibleRecordIdList();\n            setRecordIds(ids);\n        } catch (error) {\n            console.error('Error fetching record IDs:', error);\n        }\n    }, [bitable, loaded]);\n\n    // 解析单元格内容\n    const parseCellContent = useCallback((value: unknown): string => {\n        // 如果值是字符串，直接返回\n        if (typeof value === 'string') {\n            return value || '*No content*';\n        }\n        \n        // 如果值是数组，可能是富文本格式\n        if (Array.isArray(value)) {\n            try {\n                // 尝试提取所有文本节点的内容并拼接\n                return value.map((item: unknown) => {\n                    if (item && typeof item === 'object') {\n                        // 使用类型断言确保类型安全\n                        const richTextNode = item as RichTextNode;\n                        return richTextNode.text || '';\n                    }\n                    return '';\n                }).join('') || '*No content*';\n            } catch (e) {\n                console.error('Error parsing array content:', e);\n            }\n        }\n        \n        // 如果值是对象或其他类型，尝试转换为字符串\n        if (value !== null && value !== undefined) {\n            try {\n                if (typeof value === 'object') {\n                    try {\n                        // 确保对象被正确转换为JSON字符串\n                        const jsonString = JSON.stringify(value, null, 2);\n                        return jsonString || '*No content*';\n                    } catch (jsonError) {\n                        console.error('Error stringifying object:', jsonError);\n                        // 如果JSON.stringify失败，尝试提取对象的属性\n                        const objProps = Object.entries(value as Record<string, unknown>)\n                            .map(([key, val]) => `${key}: ${String(val)}`)\n                            .join(', ');\n                        return objProps || '*Object conversion failed*';\n                    }\n                }\n                return String(value) || '*No content*';\n            } catch (e) {\n                console.error('Error converting to string:', e);\n            }\n        }\n        \n        return '*No content*';\n    }, []);\n\n    // 获取单元格内容\n    const getCellContent = useCallback(async (fieldId: string, recordId: string): Promise<string> => {\n        if (!loaded || !bitable) return '*No content*';\n        \n        try {\n            const table = await bitable.base.getActiveTable();\n            // 使用getCellString方法获取单元格内容\n            const cellValue = await table.getCellString(fieldId, recordId);\n            \n            // 处理不同类型的值\n            if (cellValue === null || cellValue === undefined) {\n                return '*No content*';\n            }\n            \n            // 先清理掉文本中任何[object Object]\n            const cleanedValue = cellValue.replace(/\\[object Object\\]/g, '');\n            \n            // 如果返回的是字符串，可能需要进一步解析\n            try {\n                // 尝试解析JSON，处理返回的可能是JSON字符串的情况\n                const parsedValue: unknown = JSON.parse(cleanedValue);\n                return parseCellContent(parsedValue);\n            } catch (e) {\n                // 如果不是有效的JSON，直接返回清理后的字符串内容\n                return cleanedValue || '*No content*';\n            }\n        } catch (error) {\n            console.error('Error getting cell content:', error);\n            return '*Error: Failed to retrieve content*';\n        }\n    }, [bitable, loaded, parseCellContent]);\n\n    // 监听单元格内容变化\n    const setupCellValueListener = useCallback((fieldId: string, recordId: string): (() => void) | undefined => {\n        if (!fieldId || !recordId) return undefined;\n        \n        // 设置定时器定期检查单元格内容变化\n        const checkInterval = window.setInterval(() => {\n            // 获取最新内容\n            void getCellContent(fieldId, recordId).then(newContent => {\n                // 更新内容\n                if (newContent && newContent !== selection.content) {\n                    setSelection(prev => ({\n                        ...prev,\n                        content: newContent\n                    }));\n                }\n            }).catch(error => {\n                console.error('Error checking cell content:', error);\n            });\n        }, 500); // 每500毫秒检查一次\n        \n        // 返回清理函数\n        return () => {\n            window.clearInterval(checkInterval);\n        };\n    }, [getCellContent, selection.content]);\n\n    // 处理选区变化\n    const handleSelectionChange = useCallback((event: SelectionChangeEvent) => {\n        if (!loaded || !bitable) return;\n        \n        const { fieldId, recordId } = event.data;\n        if (!fieldId || !recordId) return;\n\n        // 使用异步函数包装异步操作\n        const fetchCellData = async () => {\n            try {\n                const table = await bitable.base.getActiveTable();\n                \n                // 获取字段名称\n                const field = await table.getFieldById(fieldId);\n                const fieldName = await field.getName();\n                \n                // 获取单元格内容\n                const content = await getCellContent(fieldId, recordId);\n                \n                // 更新选区状态\n                setSelection({\n                    fieldId,\n                    recordId,\n                    content,\n                    fieldName\n                });\n\n                // 更新当前索引\n                const index = recordIds.indexOf(recordId);\n                setCurrentIndex(Math.max(index, -1));\n            } catch (error) {\n                console.error('Error fetching cell data:', error);\n            }\n        };\n\n        // 执行异步操作\n        void fetchCellData();\n    }, [bitable, loaded, recordIds, getCellContent]);\n\n    // 导航记录\n    const switchRecord = useCallback(async (direction: 'prev' | 'next') => {\n        if (!loaded || !bitable || !selection.fieldId || recordIds.length === 0) return;\n\n        const currentIndex = recordIds.indexOf(selection.recordId || '');\n        if (currentIndex === -1) return;\n\n        let newIndex: number;\n        if (direction === 'prev') {\n            newIndex = currentIndex > 0 ? currentIndex - 1 : recordIds.length - 1;\n        } else {\n            newIndex = currentIndex < recordIds.length - 1 ? currentIndex + 1 : 0;\n        }\n\n        const recordId = recordIds[newIndex];\n        if (!recordId) return;\n\n        try {\n            // 获取单元格内容\n            const content = await getCellContent(selection.fieldId, recordId);\n            \n            // 更新选区状态\n            setSelection(prev => ({\n                ...prev,\n                recordId,\n                content\n            }));\n            setCurrentIndex(newIndex);\n        } catch (error) {\n            console.error('Error switching records:', error);\n        }\n    }, [bitable, loaded, selection.fieldId, selection.recordId, recordIds, getCellContent]);\n\n    // 初始化\n    useEffect(() => {\n        if (!loaded || !bitable) return;\n        \n        void getRecordIds();\n        const off = bitable.base.onSelectionChange(handleSelectionChange);\n        \n        return () => {\n            off();\n        };\n    }, [bitable, loaded, handleSelectionChange, getRecordIds]);\n\n    // 当选中的单元格变化时，设置内容变化监听\n    useEffect(() => {\n        if (!loaded || !bitable || !selection.fieldId || !selection.recordId) return;\n        \n        // 设置单元格内容变化监听\n        const cleanup = setupCellValueListener(selection.fieldId, selection.recordId);\n        \n        return cleanup;\n    }, [loaded, bitable, selection.fieldId, selection.recordId, setupCellValueListener]);\n\n    return {\n        selection,\n        recordIds,\n        currentIndex,\n        switchRecord,\n        loading,\n        error\n    };\n}; ","export default \"__VITE_ASSET__c2b3a5f0__\"","export default \"__VITE_ASSET__3aa3bd0f__\"","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst SponsorButton: React.FC = () => {\n    const { t } = useTranslation();\n    \n    return (\n        <>\n            <a \n                href=\"https://applink.feishu.cn/client/chat/chatter/add_by_link?link_token=3cbueaf7-a6b9-44ca-96eb-d490646326c5\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"px-3 py-1.5 bg-indigo-500 text-white font-bold rounded-md hover:bg-indigo-600 transition-colors text-xs flex items-center\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path d=\"M9 2a2 2 0 00-2 2v8a2 2 0 002 2h6a2 2 0 002-2V6.414A2 2 0 0016.414 5L14 2.586A2 2 0 0012.586 2H9z\" />\n                    <path d=\"M3 8a2 2 0 012-2v10h8a2 2 0 01-2 2H5a2 2 0 01-2-2V8z\" />\n                </svg>\n                {t('official.doclink')}\n            </a>\n        </>\n    );\n};\n\nexport default SponsorButton;","/**\n * @file Navbar.tsx\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 导航栏组件 - 简化版\n */\nimport React, { useMemo } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { useBaseSelection } from \"../../core/bitable\";\nimport { IoChevronBack, IoChevronForward } from \"react-icons/io5\";\nimport logo from \"../../assets/logo.svg\";\nimport logoEn from \"../../assets/logo_en.svg\";\nimport SponsorButton from \"./SponsorButton\";\n\ntype NavbarProps = {\n    recordIdsLength: number;\n    currentIndex?: number;\n    onSwitchRecord: (direction: 'prev' | 'next') => void;\n};\n\nexport const Navbar: React.FC<NavbarProps> = ({ \n    recordIdsLength, \n    currentIndex = -1, \n    onSwitchRecord \n}) => {\n    const { t, i18n } = useTranslation();\n    const { selection } = useBaseSelection();\n\n    // 根据当前语言选择对应的logo\n    const currentLogo = useMemo(() => {\n        const currentLanguage = i18n.language;\n        // 当语言为en或ja时使用英文logo，其他情况使用中文logo\n        return (currentLanguage === 'en' || currentLanguage === 'ja') ? logoEn : logo;\n    }, [i18n.language]);\n\n    // 计算当前导航状态\n    const isFirstRecord = currentIndex === 0;\n    const isLastRecord = currentIndex === recordIdsLength - 1;\n\n    return (\n        <div className=\"fixed top-0 left-0 right-0 z-50\">\n            <nav className=\"bg-app-card px-4 py-2\">\n                <div className=\"container mx-auto flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                        <img src={currentLogo} alt=\"Logo\" className=\"h-6 w-auto\" />\n                    </div>\n                    <SponsorButton />\n                </div>\n            </nav>\n            \n            <div className=\"flex justify-between items-center bg-app-card border-b border-app px-4 py-2\">\n                <span className=\"text-sm text-app opacity-70\">\n                    {t('navbar.current')} <span className=\"font-bold text-indigo-600\">{selection.fieldName || t('navbar.defaultTitle')}</span>\n                    {currentIndex > -1 && (\n                        <> - {t('navbar.number')}<span className=\"font-bold text-indigo-600\">{currentIndex + 1}</span> {t('navbar.row')}</>\n                    )}\n                </span>\n\n                {/* Prev/Next Buttons */} \n                <div className=\"flex space-x-1\">\n                    <button \n                        className={`h-5 w-10 ${isFirstRecord ? 'bg-indigo-300 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700 active:bg-indigo-700'} text-white rounded shadow-md hover:shadow-lg active:shadow transform active:translate-y-0.5 transition-all flex items-center justify-center`}\n                        onClick={() => !isFirstRecord && onSwitchRecord('prev')}\n                        disabled={isFirstRecord}\n                    >\n                        <IoChevronBack className=\"text-lg\" />\n                    </button>\n                    <button \n                        className={`h-5 w-10 ${isLastRecord ? 'bg-indigo-300 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700 active:bg-indigo-700'} text-white rounded shadow-md hover:shadow-lg active:shadow transform active:translate-y-0.5 transition-all flex items-center justify-center`}\n                        onClick={() => !isLastRecord && onSwitchRecord('next')}\n                        disabled={isLastRecord}\n                    >\n                        <IoChevronForward className=\"text-lg\" />\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n","/**\n * @file ErrorContent.tsx\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 错误内容展示组件\n */\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface ErrorContentProps {\n  message: string;\n}\n\nconst ErrorContent: React.FC<ErrorContentProps> = ({ message }) => {\n  const { t } = useTranslation();\n  \n  return (\n    <div className=\"h-full flex items-center justify-center bg-app-card rounded-lg shadow-sm\">\n      <div className=\"text-center max-w-md p-6\">\n        <div className=\"w-16 h-16 bg-red-100 text-red-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-medium text-red-600 mb-2\">{t('error.title')}</h3>\n        <p className=\"text-gray-600 mb-4\">{message || t('error.message')}</p>\n        <button \n          onClick={() => window.location.reload()}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors\"\n        >\n          {t('error.reload')}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ErrorContent; ","/**\n * @file ContentSkeleton.tsx\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 内容加载骨架屏组件\n */\nimport React from 'react';\n\nconst ContentSkeleton: React.FC = () => {\n  return (\n    <div className=\"h-full bg-app-card rounded-lg shadow-sm animate-pulse\">\n      <div className=\"p-6\">\n        {/* 标题骨架 */}\n        <div className=\"h-8 bg-gray-200 rounded-md w-3/4 mb-6\"></div>\n        \n        {/* 内容骨架 */}\n        <div className=\"space-y-4\">\n          <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-4/6\"></div>\n        </div>\n        \n        {/* 代码块骨架 */}\n        <div className=\"mt-8 p-4 bg-gray-100 rounded-md\">\n          <div className=\"space-y-2\">\n            <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n            <div className=\"h-3 bg-gray-200 rounded w-4/5\"></div>\n            <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContentSkeleton; "],"file":"assets/ui-components-af130aa6.js"}