{"version":3,"file":"index-dafd9b29.js","sources":["../../src/features/export/useCopyToClipboard.ts","../../src/features/export/Footer.tsx","../../src/features/template/wechat-templates.ts","../../src/features/preview/EditorPreview.tsx","../../src/features/preview/useScrollSync.ts","../../src/core/markdown/styles.ts","../../src/core/markdown/code-highlight.ts","../../src/core/markdown/renderer.ts","../../src/core/markdown/parser.ts","../../src/core/markdown/index.ts","../../src/features/preview/usePreviewContent.ts","../../src/features/template/TemplateContext.tsx","../../src/features/preview/ContentPreview.tsx","../../src/features/template/useTemplateContext.tsx","../../src/core/theme/ThemeContext.ts","../../src/shared/types/index.ts","../../src/core/theme/useTheme.ts","../../src/core/theme/ThemeProvider.tsx","../../src/features/template/TemplateProvider.tsx","../../src/app/App.tsx","../../src/core/theme/useThemeContext.ts","../../src/app/main.tsx"],"sourcesContent":["/**\n * @file useCopyToClipboard.ts\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 复制到剪贴板钩子函数\n */\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'sonner';\nconst DEFAULT_COLOR = '#212529'; // 默认的石墨黑颜色\n\ninterface ThemeColorChangeEvent extends CustomEvent {\n  detail: {\n    color: string;\n  };\n}\n\nexport const useCopyToClipboard = () => {\n  const { t } = useTranslation();\n  const [currentThemeColor, setCurrentThemeColor] = useState<string>(DEFAULT_COLOR);\n\n  // 监听主题颜色变化\n  useEffect(() => {\n    const handleThemeColorChange = (event: Event) => {\n      const customEvent = event as ThemeColorChangeEvent;\n      if (customEvent.detail && customEvent.detail.color) {\n        setCurrentThemeColor(customEvent.detail.color);\n      }\n    };\n\n    // 初始化时获取当前主题色\n    const themeColor = getComputedStyle(document.documentElement).getPropertyValue('--themeColor').trim();\n    if (themeColor) {\n      setCurrentThemeColor(themeColor || DEFAULT_COLOR);\n    }\n\n    window.addEventListener('themeColorChange', handleThemeColorChange);\n    return () => {\n      window.removeEventListener('themeColorChange', handleThemeColorChange);\n    };\n  }, []);\n\n  const copyToClipboard = useCallback(async (contentElement: HTMLElement | null) => {\n    if (!contentElement) return false;\n\n    try {\n      // 创建临时容器\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = contentElement.innerHTML;\n      \n      // 获取当前实际使用的主题色\n      let activeThemeColor = currentThemeColor;\n      const rootStyle = getComputedStyle(document.documentElement);\n      const cssThemeColor = rootStyle.getPropertyValue('--themeColor').trim();\n      if (cssThemeColor) {\n        activeThemeColor = cssThemeColor;\n      }\n      \n      // 直接替换所有CSS变量引用\n      const styleElement = document.createElement('style');\n      styleElement.textContent = `\n        * {\n          --themeColor: ${activeThemeColor} !important;\n        }\n      `;\n      tempDiv.appendChild(styleElement);\n      \n      // 处理所有的 blockquote 元素\n      const targetBlockquotes = tempDiv.getElementsByTagName('blockquote');\n      for (let i = 0; i < targetBlockquotes.length; i++) {\n        const targetBlockquote = targetBlockquotes[i];\n        targetBlockquote.style.borderLeftColor = activeThemeColor;\n      }\n\n      // 直接处理标题和强调文本\n      const headings = tempDiv.querySelectorAll('h1, h2, h3, h4, h5, h6');\n      for (let i = 0; i < headings.length; i++) {\n        const heading = headings[i] as HTMLElement;\n        heading.style.color = activeThemeColor;\n      }\n      \n      const strongs = tempDiv.querySelectorAll('strong');\n      for (let i = 0; i < strongs.length; i++) {\n        const strong = strongs[i];\n        if (strong instanceof HTMLElement) {\n          strong.style.color = activeThemeColor;\n        }\n      }\n\n      // 将临时容器添加到文档中\n      tempDiv.style.position = 'fixed';\n      tempDiv.style.left = '-9999px';\n      tempDiv.style.top = '0';\n      document.body.appendChild(tempDiv);\n\n      // 尝试复制\n      let success = false;\n      try {\n        // 尝试使用 Clipboard API\n        await navigator.clipboard.write([\n          new ClipboardItem({\n            'text/html': new Blob([tempDiv.innerHTML], { type: 'text/html' }),\n            'text/plain': new Blob([tempDiv.textContent || ''], { type: 'text/plain' })\n          })\n        ]);\n        success = true;\n      } catch (clipboardError) {\n        console.log('Clipboard API failed, trying execCommand', clipboardError);\n        \n        try {\n          // 降级处理：使用 execCommand\n          tempDiv.contentEditable = 'true';\n          const selection = window.getSelection();\n          if (selection) {\n            const range = document.createRange();\n            range.selectNodeContents(tempDiv);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            \n            success = document.execCommand('copy');\n            selection.removeAllRanges();\n          }\n        } catch (execError) {\n          console.error('execCommand failed too', execError);\n        }\n      }\n\n      // 清理临时元素\n      document.body.removeChild(tempDiv);\n      \n      if (success) {\n        // 显示成功提示\n        toast.success(t('copy.success'));\n        return true;\n      } else {\n        throw new Error('All copy methods failed');\n      }\n    } catch (error) {\n      console.error('Failed to copy content:', error);\n      // 显示错误提示\n      toast.error(t('copy.error'));\n      return false;\n    }\n  }, [t, currentThemeColor]);\n\n  const handleCopy = useCallback(async (selection: Selection | null, content: string) => {\n    try {\n      // 如果有选中的文本，使用选中的内容\n      if (selection && !selection.isCollapsed) {\n        const range = selection.getRangeAt(0);\n        const container = range.cloneContents();\n        const div = document.createElement('div');\n        div.appendChild(container);\n        return await copyToClipboard(div);\n      }\n\n      // 否则复制整个内容\n      return await copyToClipboard(document.getElementById(content));\n    } catch (error) {\n      console.error('Handle copy error:', error);\n      // 显示错误提示\n      toast.error(t('copy.error'));\n      return false;\n    }\n  }, [copyToClipboard, t]);\n\n  return {\n    handleCopy,\n    copyToClipboard\n  };\n};\n","/**\n * @file Footer.tsx\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 页脚组件\n */\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useCopyToClipboard } from './useCopyToClipboard';\nimport { useBaseSelection } from '../../core/bitable';\nimport { IoTime } from 'react-icons/io5';\nimport html2pdf from 'html2pdf.js';\nimport { FiDownload } from 'react-icons/fi';\n\n\ntype FooterProps = {\n    content: string;\n\n};\n\nexport const Footer: React.FC<FooterProps> = ({ \n\n    content,\n}) => {\n    const { t } = useTranslation();\n    const { handleCopy } = useCopyToClipboard();\n    const { selection, currentIndex } = useBaseSelection();\n    \n    return (\n        <footer className=\"fixed bottom-0 left-0 right-0 z-20 bg-white border-t border-gray-200 bg-opacity-100\">\n            <div className=\"flex items-center h-12 justify-between\">\n                {/* 中间信息区域 */}\n                <div className=\"flex justify-center\">\n                    <div className=\"h-8 px-2 text-gray-600 flex items-center justify-center text-xs\">\n                        <IoTime className=\"mr-1 text-gray-500\" />\n                        {content.length}{t('footer.wordCount')}, {t('footer.readingTime')}{Math.round(content.length / 100)}{t('footer.minutes')}\n                    </div>\n                </div>\n                \n                {/* 右侧按钮组 */}\n                <div className=\"px-4 flex space-x-2\">\n                    {/* 复制按钮 */}\n                    <button\n                        onClick={() => void handleCopy(window.getSelection(), 'preview-content')}\n                        className=\"h-8 px-2 bg-indigo-600 hover:bg-indigo-700 active:bg-indigo-700 text-white rounded shadow-md hover:shadow-lg active:shadow transform active:translate-y-0.5 transition-all flex items-center justify-center text-xs\"\n                        title={t('contentPreview.copy')}\n                    >\n                        <svg className=\"w-4 h-4 mr-1\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M16 12.9V17.1C16 20.6 14.6 22 11.1 22H6.9C3.4 22 2 20.6 2 17.1V12.9C2 9.4 3.4 8 6.9 8H11.1C14.6 8 16 9.4 16 12.9Z\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                            <path d=\"M22 6.9V11.1C22 14.6 20.6 16 17.1 16H16V12.9C16 9.4 14.6 8 11.1 8H8V6.9C8 3.4 9.4 2 12.9 2H17.1C20.6 2 22 3.4 22 6.9Z\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                        </svg>\n                        {t('contentPreview.copy')}\n                    </button>\n                    {/* 导出 PDF 按钮 */}\n                    <button\n                        onClick={() => {\n                            const element = document.getElementById('preview-content');\n                            if (element) {\n                                // Get current date\n                                const now = new Date();\n                                const dateStr = now.getFullYear().toString() +\n                                              (now.getMonth() + 1).toString().padStart(2, '0') +\n                                              now.getDate().toString().padStart(2, '0');\n                                \n                                // Construct filename with format: 字段名_行_日期.pdf\n                                const fieldName = selection.fieldName || '报告';\n                                const rowNumber = currentIndex >= 0 ? (currentIndex + 1) : 1;\n                                \n                                // Sanitize field name for filename (remove invalid characters)\n                                const sanitizedFieldName = fieldName.replace(/[/\\\\?%*:|\"<>]/g, '-');\n                                \n                                const dynamicFilename = `${sanitizedFieldName}_${rowNumber}_${dateStr}.pdf`;\n\n                                // Configuration options for html2pdf\n                                const opt = {\n                                    margin:       1,\n                                    filename:     dynamicFilename, // Use dynamic filename\n                                    image:        { type: 'jpeg', quality: 0.98 },\n                                    html2canvas:  { scale: 2, useCORS: true },\n                                    jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' },\n                                    pagebreak:    { mode: 'css', before: '.page-break-before' }\n                                };\n                                // Use html2pdf to save the element as PDF\n                                void html2pdf().set(opt).from(element).save();\n                            } else {\n                                console.error('Element with ID \"preview-content\" not found.');\n                            }\n                        }}\n                        className=\"h-8 px-2 bg-indigo-600 hover:bg-indigo-700 active:bg-indigo-700 text-white rounded shadow-md hover:shadow-lg active:shadow transform active:translate-y-0.5 transition-all flex items-center justify-center text-xs\"\n                        title={t('footer.exportPdf', 'Export as PDF')}\n                    >\n                        <FiDownload className=\"w-4 h-4 mr-1\" />\n                        {t('footer.exportPdfButton', '导出PDF')}\n                    </button>\n                </div>\n            </div>\n        </footer>\n    );\n};","import type { RendererOptions } from '../../core/markdown'\n\nexport interface Template {\n  id: string\n  name: string\n  description: string\n  styles: string\n  options: RendererOptions\n  transform?: (html: string) => string | { html?: string; content?: string }\n}\n\nexport const templates: Template[] = [\n  {\n    id: 'wechat',\n    name: '默认主题',\n    description: '微信公众号文章样式',\n    styles: 'wechat-template',\n    options: {\n        base: {\n            themeColor: 'var(--themeColor, rgb(0, 0, 0))',\n            fontFamily: '\\'Source Han Sans\\', -apple-system-font, BlinkMacSystemFont, \"Helvetica Neue\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", Arial, sans-serif',\n            textAlign: 'left',\n            lineHeight: '2',\n            padding: '1rem 1.5rem',\n            maxWidth: '100%',\n            margin: '0 auto',\n            wordBreak: 'break-word',\n            whiteSpace: 'pre-wrap',\n            fontSize: '15px',\n            color: '#333'\n          },\n          block: {                // 一级标题\n            h1: {\n              display: 'block',\n              padding: '0 1em 0.5em 1em',\n              borderBottom: '2px solid var(--themeColor)',\n              margin: '2em auto 1em',\n              color: 'var(--themeColor)',\n              fontSize: '1.2em',\n              fontWeight: 'bold',\n              textAlign: 'center',\n              textDecoration: 'none',\n              pageBreakInside: 'avoid'\n            },\n        \n            // 二级标题\n            h2: {\n              display: 'block',\n              padding: '0 0.2em 0.5em 0.2em',\n              margin: '2em auto 2em',\n              color: 'var(--themeColor)',\n              borderBottom: '2px solid var(--themeColor)',\n              fontSize: '1.2em',\n              fontWeight: 'bold',\n              textAlign: 'center',\n              textDecoration: 'none',\n              pageBreakInside: 'avoid'\n            },\n        \n            // 三级标题\n            h3: {\n              paddingLeft: '12px',\n              borderLeft: '4px solid var(--themeColor)',\n              margin: '2em 8px 0.75em 0',\n              color: 'var(--themeColor)',\n              fontSize: '1.1em',\n              fontWeight: 'bold',\n              lineHeight: '1.2',\n              pageBreakInside: 'avoid'\n            },\n        \n            // 四级标题\n            h4: {\n              'margin': `2em 8px 0.5em`,\n              'color': `var(--themeColor)`,\n              'fontSize': `1em`,\n              'fontWeight': `bold`,\n              pageBreakInside: 'avoid'\n            },\n        \n            // 五级标题\n            h5: {\n              'margin': `1.5em 8px 0.5em`,\n              'color': `var(--themeColor)`,\n              'fontSize': `1em`,\n              'fontWeight': `bold`,\n              pageBreakInside: 'avoid'\n            },\n        \n            // 六级标题\n            h6: {\n              'margin': `1.5em 8px 0.5em`,\n              'fontSize': `1em`,\n              'color': `var(--themeColor)`,\n              pageBreakInside: 'avoid'\n            },\n        \n            // 段落\n            p: {\n              'fontSize': `var(--fontSize)`,\n              'margin': `1.5em 8px`,\n              'letterSpacing': `0.1em`,\n              'color': `hsl(var(--foreground))`,\n              'textAlign': `justify`,\n              pageBreakInside: 'avoid'\n            },\n        \n            // 引用\n            blockquote: {\n              fontStyle: 'normal',\n              padding: '1em',\n              borderLeft: '4px solid var(--themeColor)',\n              borderRadius: '6px',\n              color: 'rgba(0,0,0,0.5)',\n              background: 'var(--blockquote-background)',\n              margin: '0 0 1em 0',\n              pageBreakInside: 'avoid'\n            },\n        \n            // 代码块\n            code_pre: {\n              'fontSize': `14px`,\n              'overflowX': `auto`,\n              'borderRadius': `8px`,\n              'padding': `1em`,\n              'lineHeight': `1.5`,\n              'margin': `10px 8px`,\n              pageBreakInside: 'avoid'\n            },\n        \n            // 行内代码\n            code: {\n              margin: '0',\n              fontFamily: 'Menlo, Operator Mono, Consolas, Monaco, monospace'\n            },\n        \n            // 图片\n            image: {\n              'display': `block`,\n              'width': `100% !important`,\n              'margin': `0.1em auto 0.5em`,\n              'borderRadius': `4px`,\n            },\n        \n            // 有序列表\n            ol: {\n              paddingLeft: '1em',\n              color: 'hsl(var(--foreground))'\n            },\n        \n            // 无序列表\n            ul: {\n              listStyle: 'circle',\n              paddingLeft: '1em',\n              color: 'hsl(var(--foreground))'\n            },\n        \n            footnotes: {\n              'margin': `0.5em 8px`,\n              'fontSize': `80%`,\n              'color': `hsl(var(--foreground))`,\n            },\n\n            table: {\n              textAlign: 'center',\n              margin: '1em 8px',\n              color: 'hsl(var(--foreground))'\n            },\n\n            thead: {\n              'background': `rgba(0, 0, 0, 0.05)`,\n              'fontWeight': `bold`,\n              'color': `hsl(var(--foreground))`,\n            },\n\n            td: {\n              border: '1px solid #dfdfdf',\n              padding: '0.25em 0.5em',\n              color: '#3f3f3f',\n            },\n\n          \n          },\n          inline: {\n            listitem: {\n              display: 'block',\n              margin: '0.2em 8px',\n              color: 'hsl(var(--foreground))',\n              pageBreakInside: 'avoid'\n            },\n        \n            codespan: {\n              'fontSize': `90%`,\n              'color': `#333333`,\n              'background': `rgba(27,31,35,.05)`,\n              'padding': `3px 5px`,\n              'borderRadius': `4px`,\n              // 'word-break': `break-all`,\n            },\n        \n            em: {\n              'fontStyle': `italic`,\n              'fontSize': `inherit`,\n            },\n        \n            link: {\n              color: `#576b95`,\n            },\n      \n            // 字体加粗样式\n            strong: {\n              'color': `var(--themeColor)`,\n              'fontWeight': `bold`,\n              'fontSize': `inherit`,\n            },\n        \n            footnote: {\n              'fontSize': `12px`,\n              'color': `hsl(var(--foreground))`,\n            }\n          }\n        },\n        transform: (html: string) => html\n  }\n]; ","import { cn } from '../../shared/utils/utils'\nimport { Loader2 } from 'lucide-react'\nimport { templates } from '../template/wechat-templates'\nimport { useRef } from 'react'\nimport { type CodeThemeId } from '../../shared/utils/code-themes'\nimport '../../styles/code-themes.css'\nimport { useScrollSync } from './useScrollSync'\n\ninterface EditorPreviewProps {\n  previewRef: React.RefObject<HTMLDivElement>\n  selectedTemplate?: string\n  isConverting: boolean\n  previewContent: string\n  codeTheme: CodeThemeId\n}\n\n// 在渲染HTML内容前，最后清理一次\nconst cleanHtml = (html: string) => {\n  if (!html) return '';\n  return html.replace(/\\[object Object\\]/g, '');\n};\n\nexport function EditorPreview({\n  previewRef,\n  selectedTemplate,\n  isConverting,\n  previewContent,\n  codeTheme\n}: EditorPreviewProps) {\n  const contentRef = useRef<HTMLDivElement>(null)\n  const { handlePreviewScroll } = useScrollSync()\n\n  // 确保清理HTML\n  const cleanedContent = cleanHtml(previewContent);\n\n  return (\n    <div \n      id=\"preview-content\"\n      ref={previewRef}\n      className={cn(\n        \"preview-container bg-white h-full w-full flex flex-col\",\n        \"markdown-body relative\",\n        selectedTemplate && templates.find(t => t.id === selectedTemplate)?.styles,\n        `code-theme-${codeTheme}`\n      )}\n    >\n      <div \n        ref={contentRef}\n        className=\"flex-1 overflow-y-auto\"\n        onScroll={handlePreviewScroll}\n      >\n        {isConverting ? (\n          <div className=\"flex flex-col items-center justify-center gap-2 p-8\">\n            <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n            <span className=\"text-sm text-muted-foreground\">正在生成预览...</span>\n          </div>\n        ) : (\n          <div \n            className={cn(\n              \"preview-content py-4 px-6 w-full max-w-none\",\n              selectedTemplate && templates.find(t => t.id === selectedTemplate)?.styles\n            )}\n            dangerouslySetInnerHTML={{ __html: cleanedContent }}\n          />\n        )}\n      </div>\n    </div>\n  )\n}","import { useCallback, useRef } from 'react'\n\nexport const useScrollSync = () => {\n  const isScrolling = useRef<boolean>(false)\n  const scrollTimeout = useRef<ReturnType<typeof setTimeout>>()\n\n  const handleEditorScroll = useCallback((e: React.UIEvent<HTMLTextAreaElement>) => {\n    if (isScrolling.current) return\n    \n    const textarea = e.currentTarget\n    const previewContainer = document.querySelector('.preview-container')?.querySelector('.flex-1.overflow-y-auto')\n    if (!previewContainer) return\n\n    isScrolling.current = true\n\n    try {\n      const scrollPercentage = textarea.scrollTop / (textarea.scrollHeight - textarea.clientHeight)\n      const targetScrollTop = scrollPercentage * (previewContainer.scrollHeight - previewContainer.clientHeight)\n      \n      previewContainer.scrollTop = targetScrollTop\n    } finally {\n      if (scrollTimeout.current) {\n        clearTimeout(scrollTimeout.current)\n      }\n      scrollTimeout.current = setTimeout(() => {\n        isScrolling.current = false\n      }, 50)\n    }\n  }, [])\n\n  const handlePreviewScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isScrolling.current) return\n    \n    const previewContainer = e.currentTarget\n    const textarea = document.querySelector('.editor-container textarea')\n    if (!textarea) return\n\n    isScrolling.current = true\n\n    try {\n      const scrollPercentage = previewContainer.scrollTop / (previewContainer.scrollHeight - previewContainer.clientHeight)\n      const targetScrollTop = scrollPercentage * (textarea.scrollHeight - textarea.clientHeight)\n      \n      textarea.scrollTop = targetScrollTop\n    } finally {\n      if (scrollTimeout.current) {\n        clearTimeout(scrollTimeout.current)\n      }\n      scrollTimeout.current = setTimeout(() => {\n        isScrolling.current = false\n      }, 50)\n    }\n  }, [])\n\n  return { handleEditorScroll, handlePreviewScroll }\n} ","import type { StyleOptions, RendererOptions } from './types'\nimport { codeThemes, type CodeThemeId } from '../../shared/utils/code-themes'\n\n\n// 将样式对象转换为 CSS 字符串\nexport function cssPropertiesToString(style: StyleOptions = {}): string {\n    if (!style) return ''\n  \n    return Object.entries(style)\n      .filter(([_, value]) => value !== undefined && value !== null)\n      .map(([key, value]) => {\n        // 处理媒体查询\n        if (key === '@media (max-width: 768px)') {\n          return ''  // 我们不在内联样式中包含媒体查询\n        }\n        \n        // 转换驼峰命名为连字符命名\n        const cssKey = key.replace(/([A-Z])/g, '-$1').toLowerCase()\n        \n        // 处理数字值\n        if (typeof value === 'number' && !cssKey.includes('line-height')) {\n          value = `${value}px`\n        }\n  \n        return `${cssKey}: ${String(value)}`\n      })\n      .filter(Boolean)  // 移除空字符串\n      .join(';')\n  }\n  \n  // 将基础样式选项转换为 CSS 字符串\n  export function baseStylesToString(base: RendererOptions['base'] = {}): string {\n    if (!base) return ''\n  \n    const styles: string[] = []\n  \n    if (base.lineHeight) {\n      styles.push(`line-height: ${base.lineHeight}`)\n    }\n    if (base.fontSize) {\n      styles.push(`font-size: ${base.fontSize}`)\n    }\n    if (base.textAlign) {\n      styles.push(`text-align: ${base.textAlign}`)\n    }\n    if (base.themeColor) {\n      styles.push(`--theme-color: ${base.themeColor}`)\n    }\n  \n    return styles.join(';')\n  }\n  \n  // 获取代码主题的样式\n  export function getCodeThemeStyles(theme: CodeThemeId): StyleOptions {\n    const themeConfig = codeThemes.find(t => t.id === theme)\n    if (!themeConfig) return {}\n  \n    return {\n      background: themeConfig.theme.background,\n      color: themeConfig.theme.text,\n    }\n  }\n  \n  // 获取代码token的样式\n  export function getTokenStyles(theme: CodeThemeId, tokenType: string): string {\n    const themeConfig = codeThemes.find(t => t.id === theme)\n    if (!themeConfig) return ''\n  \n    const tokenColor = themeConfig.theme[tokenType as keyof typeof themeConfig.theme]\n    if (!tokenColor) return ''\n    return `color: ${tokenColor};`\n  } ","import Prism from 'prismjs'\nimport 'prismjs/components/prism-typescript'\nimport 'prismjs/components/prism-javascript'\nimport 'prismjs/components/prism-jsx'\nimport 'prismjs/components/prism-tsx'\nimport 'prismjs/components/prism-python'\nimport 'prismjs/components/prism-java'\nimport 'prismjs/components/prism-go'\nimport 'prismjs/components/prism-rust'\nimport 'prismjs/components/prism-sql'\nimport 'prismjs/components/prism-json'\nimport 'prismjs/components/prism-yaml'\nimport 'prismjs/components/prism-css'\nimport 'prismjs/components/prism-bash'\nimport 'prismjs/components/prism-markdown'\nimport type { CodeThemeId } from '../../shared/utils/code-themes'\nimport { getTokenStyles } from './styles'\n\ninterface PrismToken {\n  type: string;\n  content: string | PrismToken | (string | PrismToken)[];\n}\n\n// Helper function to recursively process tokens\nfunction processToken(token: string | PrismToken, codeTheme: CodeThemeId): string {\n  if (typeof token === 'string') {\n    return token\n  }\n\n  const tokenStyle = getTokenStyles(codeTheme, token.type)\n  const content = Array.isArray(token.content)\n    ? token.content.map(t => processToken(t, codeTheme)).join('')\n    : processToken(token.content, codeTheme)\n\n  return `<span style=\"${tokenStyle}\">${content}</span>`\n}\n\nexport function highlightCode(text: string, lang: string, codeTheme: CodeThemeId): string {\n  if (!lang || !Prism.languages[lang]) {\n    return text\n  }\n\n  try {\n    const grammar = Prism.languages[lang]\n    const lines = text.split('\\n')\n    const lineNumbersWidth = lines.length.toString().length * 8 + 20\n\n    return lines.map((line, index) => {\n      const lineTokens = Prism.tokenize(line, grammar) as (string | PrismToken)[]\n      const processedLine = lineTokens.map(t => processToken(t, codeTheme)).join('')\n      return `<div class=\"code-line\"><span class=\"line-number\" style=\"width:${lineNumbersWidth}px;color:#999;padding-right:1em;text-align:right;display:inline-block;user-select:none;\">${index + 1}</span>${processedLine}</div>`\n    }).join('\\n')\n  } catch (error) {\n    console.error(`Error highlighting code: ${String(error)}`)\n    return text\n  }\n} ","import { marked } from 'marked'\nimport type { RendererOptions } from './types'\nimport { cssPropertiesToString } from './styles'\nimport { highlightCode } from './code-highlight'\n\nexport class MarkdownRenderer {\n  private renderer: marked.Renderer\n  private options: RendererOptions\n\n  constructor(options: RendererOptions) {\n    this.options = options\n    this.renderer = new marked.Renderer()\n    this.initializeRenderer()\n  }\n\n  private initializeRenderer() {\n    // 重写 heading 方法\n    this.renderer.heading = (text: string, level: number) => {\n      const headingKey = `h${level}` as keyof RendererOptions['block']\n      const headingStyle = (this.options.block?.[headingKey] || {})\n      const style = {\n        ...headingStyle,\n        color: this.options.base?.themeColor\n      }\n      const styleStr = cssPropertiesToString(style)\n      \n      // For h3, prepend a character to act as a robust vertical bar\n      if (level === 3) {\n        text = `▍ ${text}`\n      }\n      \n      return `<h${level}${styleStr ? ` style=\"${styleStr}\"` : ''}>${text}</h${level}>`\n    }\n\n    // 重写 paragraph 方法\n    this.renderer.paragraph = (text: string) => {\n      const paragraphStyle = (this.options.block?.p || {})\n      const style = {\n        ...paragraphStyle,\n        fontSize: this.options.base?.fontSize,\n        lineHeight: this.options.base?.lineHeight\n      }\n      const styleStr = cssPropertiesToString(style)\n      return `<p${styleStr ? ` style=\"${styleStr}\"` : ''}>${text}</p>`\n    }\n\n    // 重写 blockquote 方法\n    this.renderer.blockquote = (text: string) => {\n      const blockquoteStyle = (this.options.block?.blockquote || {})\n      const style = {\n        ...blockquoteStyle,\n        borderLeft: `4px solid ${this.options.base?.themeColor || '#1a1a1a'}`\n      }\n      const styleStr = cssPropertiesToString(style)\n      return `<blockquote${styleStr ? ` style=\"${styleStr}\"` : ''}>${text}</blockquote>`\n    }\n\n    // 重写 code 方法\n    this.renderer.code = (code: string, language: string | undefined) => {\n      const codeStyle = (this.options.block?.code_pre || {})\n      const style = {\n        ...codeStyle\n      }\n      const styleStr = cssPropertiesToString(style)\n      const highlighted = highlightCode(code, language || '', this.options.codeTheme || 'github')\n      return `<pre${styleStr ? ` style=\"${styleStr}\"` : ''}><code class=\"language-${language || ''}\">${highlighted}</code></pre>`\n    }\n\n    // 重写 codespan 方法\n    this.renderer.codespan = (text: string) => {\n      const codespanStyle = (this.options.inline?.codespan || {})\n      const styleStr = cssPropertiesToString(codespanStyle)\n      return `<code${styleStr ? ` style=\"${styleStr}\"` : ''}>${text}</code>`\n    }\n\n    // 重写 em 方法\n    this.renderer.em = (text: string) => {\n      const emStyle = (this.options.inline?.em || {})\n      const style = {\n        ...emStyle,\n        fontStyle: 'italic'\n      }\n      const styleStr = cssPropertiesToString(style)\n      return `<em${styleStr ? ` style=\"${styleStr}\"` : ''}>${text}</em>`\n    }\n\n    // 重写 strong 方法\n    this.renderer.strong = (text: string) => {\n      const strongStyle = (this.options.inline?.strong || {})\n      const style = {\n        ...strongStyle,\n        color: this.options.base?.themeColor,\n        fontWeight: 'bold'\n      }\n      const styleStr = cssPropertiesToString(style)\n      return `<strong${styleStr ? ` style=\"${styleStr}\"` : ''}>${text}</strong>`\n    }\n\n    // 重写 link 方法\n    this.renderer.link = (href: string, title: string | null | undefined, text: string) => {\n      const linkStyle = (this.options.inline?.link || {})\n      const styleStr = cssPropertiesToString(linkStyle)\n      return `<a href=\"${href}\"${title ? ` title=\"${title}\"` : ''}${styleStr ? ` style=\"${styleStr}\"` : ''}>${text}</a>`\n    }\n\n    // 重写 image 方法\n    this.renderer.image = (href: string, title: string | null | undefined, text: string) => {\n      const imageStyle = (this.options.block?.image || {})\n      const style = {\n        ...imageStyle,\n        maxWidth: '100%',\n        display: 'block',\n        margin: '0.5em auto'\n      }\n      const styleStr = cssPropertiesToString(style)\n      return `<img src=\"${href}\"${title ? ` title=\"${title}\"` : ''} alt=\"${text}\"${styleStr ? ` style=\"${styleStr}\"` : ''}>`\n    }\n\n    // 重写 list 方法\n    this.renderer.list = (body: string, ordered: boolean, start: number | '') => {\n      const tag = ordered ? 'ol' : 'ul'\n      const listStyle = (this.options.block?.[tag] || {})\n      const style = {\n        ...listStyle,\n        listStyle: ordered ? 'decimal' : 'disc',\n        paddingLeft: '2em',\n        marginBottom: '16px'\n      }\n      const styleStr = cssPropertiesToString(style)\n      const startAttr = ordered && start !== 1 ? ` start=\"${start}\"` : ''\n      return `<${tag}${startAttr}${styleStr ? ` style=\"${styleStr}\"` : ''}>${body}</${tag}>`\n    }\n\n    // 重写 listitem 方法\n    this.renderer.listitem = (text: string, task: boolean, checked: boolean) => {\n      const listitemStyle = (this.options.inline?.listitem || {})\n      const style = {\n        ...listitemStyle,\n        marginBottom: '8px',\n        display: 'list-item'\n      }\n      const styleStr = cssPropertiesToString(style)\n      \n      let content = text\n      if (task) {\n        const checkbox = `<input type=\"checkbox\"${checked ? ' checked=\"\"' : ''} disabled=\"\" /> `\n        content = checkbox + content\n      }\n      \n      return `<li${styleStr ? ` style=\"${styleStr}\"` : ''}>${content}</li>`\n    }\n\n    // 重写 del 方法\n    this.renderer.del = (text: string) => {\n      const delStyle = (this.options.inline?.del || {})\n      const styleStr = cssPropertiesToString(delStyle)\n      return `<del${styleStr ? ` style=\"${styleStr}\"` : ''}>${text}</del>`\n    }\n  }\n\n  public getRenderer(): marked.Renderer {\n    return this.renderer\n  }\n} ","import { marked } from 'marked'\nimport type { RendererOptions } from './types'\nimport { MarkdownRenderer } from './renderer'\nimport { baseStylesToString } from './styles'\n\ninterface ListItem {\n  task?: boolean\n  checked?: boolean\n  type: string\n}\n\ninterface ListToken {\n  type: 'list'\n  items: ListItem[]\n}\n\nexport class MarkdownParser {\n  private options: RendererOptions\n  private renderer: MarkdownRenderer\n\n  constructor(options: RendererOptions) {\n    this.options = options\n    this.renderer = new MarkdownRenderer(options)\n    this.initializeMarked()\n  }\n\n  private initializeMarked() {\n    marked.setOptions({\n      gfm: true,\n      breaks: true,\n      pedantic: false,\n      renderer: this.renderer.getRenderer()\n    })\n\n    marked.use({\n      breaks: true,\n      gfm: true,\n      walkTokens(token: { type: string }) {\n        // 确保列表项被正确处理\n        if (token.type === 'list') {\n          const listToken = token as ListToken\n          listToken.items.forEach((item: ListItem) => {\n            if (item.task) {\n              item.checked = !!item.checked\n            }\n          })\n        }\n      }\n    })\n  }\n\n  public async parse(markdown: string): Promise<string> {\n    const preprocessed = this.preprocessMarkdown(markdown)\n    const html = await Promise.resolve(marked(preprocessed))\n    const baseStyles = baseStylesToString(this.options.base)\n    return baseStyles ? `<section style=\"${baseStyles}\">${html}</section>` : html\n  }\n\n  // 预处理 markdown 文本\n  private preprocessMarkdown(markdown: string): string {\n    return markdown\n      // 处理自定义 text_tag 标签\n      .replace(/<text_tag\\s+color='([^']+)'>(.*?)<\\/text_tag>/g, (_match: string, color: string, content: string) => {\n        return this.renderTextTag(content, color)\n      })\n      // 处理 ** 语法，但排除已经是 HTML 的部分\n      .replace(/(?<!<[^>]*)\\*\\*([^*]+)\\*\\*(?![^<]*>)/g, '<strong>$1</strong>')\n      // 处理无序列表的 - 标记，但排除代码块内的部分\n      .replace(/^(?!\\s*```)([ \\t]*)-\\s+/gm, '$1• ')\n  }\n\n  // 渲染自定义文本标签\n  private renderTextTag(content: string, color: string): string {\n    const colorMap: { [key: string]: string } = {\n      'purple': '#8b5cf6',\n      'green': '#10b981',\n      'blue': '#3b82f6',\n      'red': '#ef4444',\n      'yellow': '#f59e0b',\n      'gray': '#6b7280',\n      'indigo': '#6366f1',\n      'pink': '#ec4899'\n    }\n    \n    const textColor = colorMap[color] || color\n    \n    // Only apply color to the text, for maximum PDF compatibility.\n    return `<span style=\"color: ${textColor}; font-weight: bold; font-family: 'Source Han Sans TC', sans-serif;\">${content}</span>`\n  }\n} ","import { MarkdownParser } from './parser'\nimport type { RendererOptions } from './types'\nimport { getCodeThemeStyles } from './styles'\n\nexport const defaultOptions: RendererOptions = {\n  base: {\n    fontSize: '16px',\n    lineHeight: '1.75',\n    color: '#333333',\n    padding: '20px',\n    themeColor: '#1a1a1a'\n  },\n  block: {\n    h1: {\n      fontSize: '24px',\n      fontWeight: 'bold',\n      lineHeight: 1.5,\n      margin: '24px 0 16px 0',\n      padding: '0',\n      borderBottom: '2px solid #1a1a1a'\n    },\n    h2: {\n      fontSize: '20px',\n      fontWeight: 'bold',\n      lineHeight: 1.5,\n      margin: '24px 0 16px 0',\n      padding: '0',\n      borderBottom: '1px solid #1a1a1a'\n    },\n    h3: {\n      fontSize: '18px',\n      fontWeight: 'bold',\n      lineHeight: 1.5,\n      margin: '24px 0 16px 0',\n      padding: '0'\n    },\n    h4: {\n      fontSize: '16px',\n      fontWeight: 'bold',\n      lineHeight: 1.5,\n      margin: '24px 0 16px 0',\n      padding: '0'\n    },\n    h5: {\n      fontSize: '14px',\n      fontWeight: 'bold',\n      lineHeight: 1.5,\n      margin: '24px 0 16px 0',\n      padding: '0'\n    },\n    h6: {\n      fontSize: '14px',\n      fontWeight: 'bold',\n      lineHeight: 1.5,\n      margin: '24px 0 16px 0',\n      padding: '0'\n    },\n    p: {\n      margin: '16px 0',\n      lineHeight: 1.75\n    },\n    blockquote: {\n      margin: '16px 0',\n      padding: '0 16px',\n      color: '#666666',\n      borderLeft: '4px solid #dddddd',\n      backgroundColor: '#f5f5f5'\n    },\n    code_pre: {\n      margin: '16px 0',\n      padding: '16px',\n      borderRadius: '4px',\n      backgroundColor: '#f6f8fa',\n      fontSize: '14px',\n      lineHeight: 1.5,\n      overflowX: 'auto'\n    }\n  },\n  inline: {\n    codespan: {\n      padding: '2px 4px',\n      borderRadius: '4px',\n      backgroundColor: '#f6f8fa',\n      fontSize: '14px'\n    },\n    strong: {\n      fontWeight: 'bold'\n    },\n    em: {\n      fontStyle: 'italic'\n    },\n    del: {\n      textDecoration: 'line-through'\n    },\n    link: {\n      color: '#0366d6',\n      textDecoration: 'none'\n    }\n  }\n}\n\nexport async function convertToWechat(markdown: string, options: RendererOptions = defaultOptions): Promise<string> {\n  const mergedOptions: RendererOptions = {\n    base: { ...defaultOptions.base, ...options.base },\n    block: { ...defaultOptions.block, ...options.block },\n    inline: { ...defaultOptions.inline, ...options.inline },\n    codeTheme: options.codeTheme || 'github'\n  }\n\n  const parser = new MarkdownParser(mergedOptions)\n  return await parser.parse(markdown)\n}\n\nexport { getCodeThemeStyles }\nexport type { RendererOptions }\nexport * from './types' ","import { useState, useCallback, useEffect } from 'react'\nimport { templates } from '../template/wechat-templates'\nimport { convertToWechat, getCodeThemeStyles, type RendererOptions } from '../../core/markdown'\nimport { type CodeThemeId } from '../../shared/utils/code-themes'\n\ninterface UsePreviewContentProps {\n  value: string\n  selectedTemplate: string\n  styleOptions: RendererOptions\n  codeTheme: CodeThemeId\n}\n\nexport const usePreviewContent = ({\n  value,\n  selectedTemplate,\n  styleOptions,\n  codeTheme\n}: UsePreviewContentProps) => {\n\n  const [isConverting, setIsConverting] = useState(false)\n  const [previewContent, setPreviewContent] = useState('')\n\n  const getPreviewContent = useCallback(async () => {\n    if (!value) return ''\n    \n    const template = templates.find(t => t.id === selectedTemplate)\n    const mergedOptions: RendererOptions = {\n      base: {\n        ...(template?.options?.base || {}),\n        ...styleOptions.base,\n      },\n      block: {\n        ...(template?.options?.block || {}),\n        ...(styleOptions.block || {}),\n        code_pre: {\n          ...(template?.options?.block?.code_pre || {}),\n          ...(styleOptions.block?.code_pre || {}),\n          ...getCodeThemeStyles(codeTheme)\n        },\n        h1: {\n          ...(template?.options?.block?.h1 || {}),\n          ...(styleOptions.block?.h1 || {}),\n          fontSize: styleOptions.block?.h1?.fontSize || template?.options?.block?.h1?.fontSize || '24px',\n          color: styleOptions.base?.themeColor || template?.options?.base?.themeColor || '#1a1a1a',\n          ...(template?.options?.block?.h1?.borderBottom && {\n            borderBottom: `2px solid ${styleOptions.base?.themeColor || template?.options?.base?.themeColor || '#1a1a1a'}`\n          })\n        },\n        h2: {\n          ...(template?.options?.block?.h2 || {}),\n          ...(styleOptions.block?.h2 || {}),\n          fontSize: styleOptions.block?.h2?.fontSize || template?.options?.block?.h2?.fontSize || '20px',\n          color: styleOptions.base?.themeColor || template?.options?.base?.themeColor || '#1a1a1a',\n          ...(template?.options?.block?.h2?.borderBottom && {\n            borderBottom: `2px solid ${styleOptions.base?.themeColor || template?.options?.base?.themeColor || '#1a1a1a'}`\n          })\n        },\n        h3: {\n          ...(template?.options?.block?.h3 || {}),\n          ...(styleOptions.block?.h3 || {}),\n          color: styleOptions.base?.themeColor || template?.options?.base?.themeColor || '#1a1a1a',\n          fontSize: '1.1em',\n          fontWeight: 'bold',\n          lineHeight: '1.5',\n        },\n        p: {\n          ...(template?.options?.block?.p || {}),\n          ...(styleOptions.block?.p || {}),\n          fontSize: styleOptions.base?.fontSize || template?.options?.base?.fontSize || '15px',\n          lineHeight: styleOptions.base?.lineHeight || template?.options?.base?.lineHeight || 2\n        },\n        ol: {\n          ...(template?.options?.block?.ol || {}),\n          ...(styleOptions.block?.ol || {}),\n          fontSize: styleOptions.base?.fontSize || template?.options?.base?.fontSize || '15px',\n        },\n        ul: {\n          ...(template?.options?.block?.ul || {}),\n          ...(styleOptions.block?.ul || {}),\n          fontSize: styleOptions.base?.fontSize || template?.options?.base?.fontSize || '15px',\n        }\n      },\n      inline: {\n        ...(template?.options?.inline || {}),\n        ...(styleOptions.inline || {}),\n        listitem: {\n          ...(template?.options?.inline?.listitem || {}),\n          ...(styleOptions.inline?.listitem || {}),\n          fontSize: styleOptions.base?.fontSize || template?.options?.base?.fontSize || '15px',\n        }\n      },\n      codeTheme\n    }\n    \n    const html = await convertToWechat(value, mergedOptions)\n   \n    if (!template?.transform) return html\n    \n    try {\n      const transformed = template.transform(html)\n      if (transformed) {\n        if (typeof transformed === 'object') {\n          const result = transformed as { html?: string; content?: string }\n          if (result.html) return result.html\n          if (result.content) return result.content\n          try {\n            return JSON.stringify(transformed, null, 2)\n          } catch (jsonError) {\n            console.error('Template transformation JSON error:', jsonError)\n            return html\n          }\n        }\n        return transformed || html\n      }\n      return html\n    } catch (error) {\n      console.error('Template transformation error:', error)\n      return html\n    }\n  }, [value, selectedTemplate, styleOptions, codeTheme])\n\n  useEffect(() => {\n    const updatePreview = async () => {\n      if (!value) {\n        setPreviewContent('')\n        return\n      }\n      \n      setIsConverting(true)\n      try {\n        const content = await getPreviewContent()\n        \n        // 最后的安全检查，移除任何[object Object]字符串\n        const cleanedContent = typeof content === 'string' \n          ? content.replace(/\\[object Object\\]/g, '') \n          : '';\n        \n        setPreviewContent(cleanedContent)\n\n        // 等待 DOM 更新\n        await new Promise(resolve => setTimeout(resolve, 50))\n\n        // 渲染 Mermaid 图表\n        // try {\n        //   await initializeMermaid()\n        // } catch (error) {\n        //   console.error('Failed to initialize Mermaid:', error)\n        // }\n      } catch (error) {\n        console.error('Error updating preview:', error)\n      } finally {\n        setIsConverting(false)\n      }\n    }\n\n    void updatePreview()\n\n  }, [value, selectedTemplate, styleOptions, codeTheme, getPreviewContent])\n\n  return {\n    isConverting,\n    previewContent,\n    getPreviewContent\n  }\n} ","import { createContext } from 'react';\n\nexport interface TemplateContextType {\n  selectedTemplate: string;\n  setSelectedTemplate: (template: string) => void;\n}\n\nexport const TemplateContext = createContext<TemplateContextType | undefined>(undefined); ","/**\n * @file ContentPreview.tsx\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 内容预览组件\n */\nimport React, { useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { EditorPreview } from './EditorPreview';\nimport { type CodeThemeId } from '../../shared/utils/code-themes';\nimport { usePreviewContent } from './usePreviewContent';\nimport { useTemplateContext } from '../template/useTemplateContext';\nimport { defaultOptions } from '../../core/markdown';\nimport { templates } from '../template/wechat-templates';\n\ntype ContentPreviewProps = {\n    content: string;\n    currentIndex?: number;\n    recordIdsLength?: number;\n    codeTheme?: CodeThemeId;\n};\n\nconst ContentPreview: React.FC<ContentPreviewProps> = ({ \n    content, \n    codeTheme = 'github'\n}) => {\n    const { t } = useTranslation();\n    const { selectedTemplate } = useTemplateContext();\n    const previewRef = useRef<HTMLDivElement>(null);\n\n    // 获取选中模板的样式配置\n    const templateConfig = templates.find(t => t.id === selectedTemplate);\n\n    const { isConverting, previewContent } = usePreviewContent({\n        value: content,\n        selectedTemplate,\n        styleOptions: templateConfig?.options || defaultOptions,\n        codeTheme\n    });\n\n    if (!content) {\n        return (\n            <div className=\"h-full flex items-center justify-center bg-app-card rounded-lg shadow-sm mt-20\">\n                <div className=\"text-center my-10\">\n                    <p className=\"text-app font-bold mb-2\">{t('contentPreview.empty')}</p>\n                    <p className=\"text-sm text-app opacity-60\">{t('contentPreview.empty')}</p>\n                </div>\n            </div>\n        );\n    }\n\n    // 使用 Editor 预览组件\n    return (\n        <div className=\"h-full w-full mt-20\">\n            <EditorPreview \n                previewRef={previewRef}\n                previewContent={previewContent}\n                isConverting={isConverting}\n                codeTheme={codeTheme}\n                selectedTemplate={selectedTemplate}\n            />\n        </div>\n    );\n};\n\nexport default ContentPreview;","import { useContext } from 'react';\nimport { TemplateContext, TemplateContextType } from './TemplateContext';\n\nexport const useTemplateContext = (): TemplateContextType => {\n  const context = useContext(TemplateContext);\n  if (context === undefined) {\n    throw new Error('useTemplateContext must be used within a TemplateProvider');\n  }\n  return context;\n}; ","/**\n * @file ThemeContext.ts\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description Theme context definition\n */\nimport { createContext } from 'react';\nimport { ThemeContextType } from '../../shared/types';\n\n// Create theme context\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined); ","// Selection related types\nexport type SelectionState = {\n    fieldId: string | undefined\n    recordId: string | undefined\n    content: string\n    fieldName: string\n}\n\nexport type SelectionChangeEvent = {\n    data: {\n        fieldId: string | null\n        recordId: string | null\n    }\n}\n\n// Bitable SDK related types\nexport interface IField {\n    getName(): Promise<string>;\n}\n\nexport interface ITable {\n    getActiveView(): Promise<IView>;\n    getCellString(fieldId: string, recordId: string): Promise<string | null>;\n    getFieldById(fieldId: string): Promise<IField>;\n}\n\nexport interface IView {\n    getVisibleRecordIdList(): Promise<string[]>;\n}\n\nexport interface IBase {\n    getActiveTable(): Promise<ITable>;\n    onSelectionChange(callback: (event: SelectionChangeEvent) => void): () => void;\n}\n\nexport interface IBitable {\n    base: IBase;\n    bridge: IBitableBridge;\n}\n\n// Theme related types\nexport enum ThemeModeType {\n    LIGHT = \"LIGHT\",\n    DARK = \"DARK\"\n}\n\n// Config option interface\nexport interface IConfigOption<T = string> {\n  label: string;\n  value: T;\n  desc: string;\n}\n\nexport type ThemeContextType = {\n    theme: ThemeModeType;\n    isDarkMode: boolean;\n}\n\nexport type ThemeModeCtx = {\n    theme: ThemeModeType;\n}\n\nexport interface IEventCbCtx<T> {\n    data: T;\n}\n\nexport interface IBitableBridge {\n    getTheme(): Promise<ThemeModeType>;\n    onThemeChange(callback: (event: IEventCbCtx<ThemeModeCtx>) => void): () => void;\n} ","/**\n * @file useTheme.ts\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description Theme hook for handling light/dark mode\n */\nimport { useEffect, useState } from 'react';\nimport { bitable } from '@lark-base-open/js-sdk';\nimport { ThemeModeType, ThemeContextType, ThemeModeCtx, IEventCbCtx } from '../../shared/types';\n\nexport const useTheme = (): ThemeContextType => {\n  const [theme, setTheme] = useState<ThemeModeType>(ThemeModeType.LIGHT);\n  \n  // 初始化主题\n  useEffect(() => {\n    const initTheme = async () => {\n      try {\n        // 从Bitable SDK获取主题\n        const currentTheme = await bitable.bridge.getTheme();\n        setTheme(currentTheme as ThemeModeType);\n      } catch (error) {\n        // 如果SDK失败，回退到系统偏好\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        const fallbackTheme = prefersDark ? ThemeModeType.DARK : ThemeModeType.LIGHT;\n        setTheme(fallbackTheme);\n      }\n    };\n    \n    void initTheme();\n    \n    // 监听主题变化\n    const unsubscribe = bitable.bridge.onThemeChange((event: IEventCbCtx<ThemeModeCtx>) => {\n      const newTheme = event.data.theme;\n      setTheme(newTheme);\n    });\n    \n    // 监听系统偏好变化作为回退\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      // 只有在不使用Bitable主题时才应用\n      if (!bitable.bridge) {\n        const newTheme = e.matches ? ThemeModeType.DARK : ThemeModeType.LIGHT;\n        setTheme(newTheme);\n      }\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    \n    return () => {\n      unsubscribe?.();\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n  \n  return {\n    theme,\n    isDarkMode: theme === ThemeModeType.DARK\n  };\n}; ","/**\n * @file ThemeProvider.tsx\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 主题提供者组件\n */\nimport { ReactNode, useEffect } from 'react';\nimport { ThemeContext } from './ThemeContext';\nimport { useTheme } from './useTheme';\n\n// Theme provider props\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\n// Theme provider component\nexport const ThemeProvider = ({ children }: ThemeProviderProps) => {\n  const themeContext = useTheme();\n  const { theme } = themeContext;\n  \n  // 设置应用的明暗主题样式\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // 定义应用明暗主题样式\n    const themeStyles = {\n      LIGHT: {\n        '--app-bg-color': '#ffffff',\n        '--app-text-color': '#213547',\n        '--app-border-color': '#dee0e3',\n        '--app-primary-color': '#333333',\n        '--app-secondary-bg': '#f5f5f5',\n        '--app-card-bg': '#ffffff',\n        '--app-hover-bg': '#f0f0f0',\n      },\n      DARK: {\n        '--app-bg-color': '#1a1a1a',\n        '--app-text-color': '#ffffff',\n        '--app-border-color': '#333333',\n        '--app-primary-color': '#ffffff',\n        '--app-secondary-bg': '#2a2a2a',\n        '--app-card-bg': '#262626',\n        '--app-hover-bg': '#3a3a3a',\n      }\n    };\n    \n    // 应用明暗主题样式\n    const currentThemeStyles = themeStyles[theme];\n    Object.entries(currentThemeStyles).forEach(([property, value]) => {\n      root.style.setProperty(property, value);\n    });\n    \n    // 添加明暗主题类到body\n    document.body.classList.remove('theme-light', 'theme-dark');\n    document.body.classList.add(`theme-${theme.toLowerCase()}`);\n  }, [theme]);\n  \n  return (\n    <ThemeContext.Provider value={themeContext}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};","import React, { useState, ReactNode } from 'react';\nimport { TemplateContext } from './TemplateContext';\n\nexport const TemplateProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [selectedTemplate, setSelectedTemplate] = useState('wechat');\n\n  return (\n    <TemplateContext.Provider value={{ selectedTemplate, setSelectedTemplate }}>\n      {children}\n    </TemplateContext.Provider>\n  );\n}; ","/**\n * @file App.tsx\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 应用程序主组件 - 简化版\n */\nimport { useTranslation } from 'react-i18next';\nimport { Toaster } from 'sonner';\nimport { Navbar, ErrorContent, ContentSkeleton } from '../shared/components';\nimport { Footer } from '../features/export';\nimport ContentPreview from '../features/preview/ContentPreview';\nimport { useBaseSelection } from '../core/bitable';\nimport { useThemeContext } from '../core/theme';\nimport { TemplateProvider } from '../features/template';\n\nfunction App() {\n  const { t } = useTranslation();\n  const { theme } = useThemeContext();\n  const { selection, recordIds, currentIndex, switchRecord, loading, error } = useBaseSelection();\n  \n  // 错误状态\n  if (error) {\n    return (\n      <TemplateProvider>\n        <div className={`h-screen w-screen flex flex-col text-app bg-app`} data-theme={theme.toLowerCase()}>\n          <Toaster position=\"top-center\" richColors={true} />\n          <ErrorContent message={error.message || t('error.message')} />\n        </div>\n      </TemplateProvider>\n    );\n  }\n\n  return (\n    <TemplateProvider>\n      <div className={`h-screen w-screen flex flex-col text-app bg-app`} data-theme={theme.toLowerCase()}>\n        <Toaster position=\"top-center\" richColors={true} />\n        \n        {/* 导航栏 */}\n        <Navbar    \n          recordIdsLength={recordIds.length}\n          currentIndex={currentIndex}\n          onSwitchRecord={(direction) => void switchRecord(direction)} \n        />\n        \n        {/* 主要内容 */}\n        <main className=\"flex-1 bg-app-secondary overflow-auto\">\n          <div className=\"w-full h-full\">\n            {loading ? (\n              <ContentSkeleton />\n            ) : (\n              <ContentPreview \n                content={selection.content} \n                currentIndex={currentIndex}\n                recordIdsLength={recordIds.length}\n              />\n            )}\n          </div>\n        </main>\n        \n        {/* 页脚 */}\n        <Footer content={selection.content} />\n        \n        {/* 添加底部空白区域，防止内容被固定导航栏遮挡 */}\n        <div className=\"h-14\"></div>\n      </div>\n    </TemplateProvider>\n  );\n}\n\nexport default App;","/**\n * @file useThemeContext.ts\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description Theme context hook\n */\nimport { useContext } from 'react';\nimport { ThemeContext } from './ThemeContext';\nimport { ThemeContextType } from '../../shared/types';\n\n/**\n * Hook to use theme context\n * Must be used within a ThemeProvider\n */\nexport const useThemeContext = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  \n  if (!context) {\n    throw new Error('useThemeContext must be used within a ThemeProvider');\n  }\n  \n  return context;\n} ","/**\n * @file main.tsx\n * @author Peng\n * @date 2025-03-02\n * @version 1.0.0\n * @description 应用程序入口文件 - 简化版\n */\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport '../index.css'\n// Import template styles\nimport '../styles/templates/wechat.css'\nimport '../styles/templates/xiaohongshu.css'\n// Import code theme styles\nimport '../styles/code-themes.css'\n// 导入并初始化i18n\nimport { initI18n } from '../shared/utils/i18n'\n// 导入主题提供者\nimport { ThemeProvider } from '../core/theme/ThemeProvider'\n\n// 初始化国际化\ninitI18n();\n\n// 应用程序提供者组合\nconst AppProviders: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <React.StrictMode>\n    <ThemeProvider>\n      {children}\n    </ThemeProvider>\n  </React.StrictMode>\n);\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <AppProviders>\n    <App />\n  </AppProviders>\n);\n"],"names":["DEFAULT_COLOR","Footer","content","t","useTranslation","handleCopy","currentThemeColor","setCurrentThemeColor","useState","useEffect","handleThemeColorChange","event","customEvent","detail","color","themeColor","getComputedStyle","document","documentElement","getPropertyValue","trim","window","addEventListener","removeEventListener","copyToClipboard","useCallback","async","contentElement","tempDiv","createElement","innerHTML","activeThemeColor","cssThemeColor","styleElement","textContent","appendChild","targetBlockquotes","getElementsByTagName","i","length","style","borderLeftColor","headings","querySelectorAll","strongs","strong","HTMLElement","position","left","top","body","success","navigator","clipboard","write","ClipboardItem","Blob","type","clipboardError","contentEditable","selection","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","execError","removeChild","toast","Error","error","isCollapsed","container","getRangeAt","cloneContents","div","getElementById","useCopyToClipboard","currentIndex","useBaseSelection","className","children","jsxs","jsx","IoTime","Math","round","jsxRuntimeExports","onClick","title","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","element","now","Date","dateStr","getFullYear","toString","getMonth","padStart","getDate","fieldName","rowNumber","opt","margin","filename","replace","image","quality","html2canvas","scale","useCORS","jsPDF","unit","format","orientation","pagebreak","mode","before","html2pdf","set","from","save","FiDownload","templates","id","name","description","styles","options","base","fontFamily","textAlign","lineHeight","padding","maxWidth","wordBreak","whiteSpace","fontSize","block","h1","display","borderBottom","fontWeight","textDecoration","pageBreakInside","h2","h3","paddingLeft","borderLeft","h4","h5","h6","p","letterSpacing","blockquote","fontStyle","borderRadius","background","code_pre","overflowX","code","width","ol","ul","listStyle","footnotes","table","thead","td","border","inline","listitem","codespan","em","link","footnote","transform","html","EditorPreview","previewRef","selectedTemplate","isConverting","previewContent","codeTheme","contentRef","useRef","handlePreviewScroll","isScrolling","scrollTimeout","handleEditorScroll","e","current","textarea","currentTarget","previewContainer","_a","querySelector","targetScrollTop","scrollTop","scrollHeight","clientHeight","clearTimeout","setTimeout","useScrollSync","cleanedContent","ref","cn","find","onScroll","Loader2","_b","dangerouslySetInnerHTML","__html","cssPropertiesToString","Object","entries","filter","_","value","map","key","cssKey","toLowerCase","includes","String","Boolean","join","getCodeThemeStyles","theme","themeConfig","codeThemes","text","processToken","token","tokenType","tokenColor","getTokenStyles","Array","isArray","MarkdownRenderer","constructor","__publicField","this","renderer","marked","Renderer","initializeRenderer","heading","level","headingKey","styleStr","paragraph","_c","language","lang","Prism","languages","grammar","lines","split","lineNumbersWidth","line","index","processedLine","tokenize","highlightCode","href","list","ordered","start","tag","marginBottom","task","checked","del","getRenderer","MarkdownParser","initializeMarked","setOptions","gfm","breaks","pedantic","use","walkTokens","items","forEach","item","parse","markdown","preprocessed","preprocessMarkdown","Promise","resolve","baseStyles","push","baseStylesToString","_match","renderTextTag","purple","green","blue","red","yellow","gray","indigo","pink","defaultOptions","backgroundColor","usePreviewContent","styleOptions","setIsConverting","setPreviewContent","getPreviewContent","template","mergedOptions","_d","_e","_g","_f","_h","_j","_i","_m","_l","_k","_n","_p","_o","_s","_q","_r","_t","_v","_u","_x","_w","_y","_A","_z","_D","_C","_B","_E","_G","_F","_J","_H","_I","_K","_M","_L","_O","_N","_P","_Q","_S","_R","_U","_T","_V","_W","_Y","_X","_Z","_$","__","_ba","_aa","_ca","_da","_fa","_ea","_ha","_ga","_ia","_ja","_la","_ka","_ma","_oa","_na","_pa","_qa","_sa","_ra","parser","convertToWechat","transformed","result","JSON","stringify","jsonError","updatePreview","TemplateContext","createContext","ContentPreview","context","useContext","useTemplateContext","templateConfig","ThemeContext","ThemeModeType","ThemeProvider","themeContext","setTheme","LIGHT","currentTheme","bitable","bridge","getTheme","fallbackTheme","matchMedia","matches","DARK","initTheme","unsubscribe","onThemeChange","newTheme","data","mediaQuery","handleChange","isDarkMode","useTheme","root","currentThemeStyles","property","setProperty","classList","remove","add","Provider","TemplateProvider","setSelectedTemplate","App","useThemeContext","recordIds","switchRecord","loading","Toaster","richColors","ErrorContent","message","Navbar","recordIdsLength","onSwitchRecord","direction","ContentSkeleton","initI18n","AppProviders","React","StrictMode","ReactDOM","createRoot","render"],"mappings":"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"}